!function(e){var o={};function n(t){if(o[t])return o[t].exports;var i=o[t]={i:t,l:!1,exports:{}};return e[t].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=o,n.d=function(e,o,t){n.o(e,o)||Object.defineProperty(e,o,{enumerable:!0,get:t})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,o){if(1&o&&(e=n(e)),8&o)return e;if(4&o&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&o&&"string"!=typeof e)for(var i in e)n.d(t,i,function(o){return e[o]}.bind(null,i));return t},n.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(o,"a",o),o},n.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},n.p="",n(n.s=7)}([function(e,o){e.exports=require("lumi-cli/dist/api/API")},function(e,o){e.exports=require("lumi-cli/dist/lib/common/FS")},function(e,o){e.exports=require("lumi-cli/dist/api/routes/SocketEvents")},function(e,o){e.exports=require("electron")},function(e,o){e.exports=require("path")},function(e,o){e.exports=require("lumi-cli/dist/lib/common/types")},function(e,o){e.exports=require("lumi-cli/dist/lib/common/FileTree")},function(e,o,n){"use strict";n.r(o);var t,i=n(4),r=n.n(i);!function(e){e.TOP_BAR="/",e.HOME="/home",e.START="/start",e.LOADING="/loading",e.INVITE="/invite",e.SETTINGS="/settings",e.LEAVE="/leave",e.ROOM="/room",e.SERVER_LOG="/serverlog"}(t||(t={}));var c;!function(e){e.SELECT_DIR="select_dir",e.CREATE_ROOM="create_room",e.JOIN_ROOM="join_room",e.NAVIGATE="navigate",e.DISCONNECTED="disconnected",e.CHECK_CONNECTION="check_connection",e.FETCH_LOG="fetch_log",e.FETCH_FOLDER="fetch_folder",e.FETCH_USERS="fetch_users",e.CREATE_WINDOW="create_window",e.UPDATE_FOLDER="update_folder",e.UPDATE_USERS="update_users"}(c||(c={}));var s=c;const{Menu:l,MenuItem:a}=n(3);var d=n(0),u=n(1),p=n(2),f=n(5),h=n(6),v=function(e,o,n,t){return new(n||(n=Promise))((function(i,r){function c(e){try{l(t.next(e))}catch(e){r(e)}}function s(e){try{l(t.throw(e))}catch(e){r(e)}}function l(e){var o;e.done?i(e.value):(o=e.value,o instanceof n?o:new n((function(e){e(o)}))).then(c,s)}l((t=t.apply(e,o||[])).next())}))};const{ipcMain:m,dialog:E,BrowserWindow:_}=n(3);class R{static init(e){m.handle(s.CHECK_CONNECTION,()=>void 0!==R.connection&&R.connection.room),m.handle(s.SELECT_DIR,()=>v(this,void 0,void 0,(function*(){return(yield E.showOpenDialog(e,{properties:["openDirectory"]})).filePaths[0]}))),m.handle(s.CREATE_ROOM,(e,o)=>v(this,void 0,void 0,(function*(){const e=yield u.FS.zip(o);return(yield d.API.RoomRequest.create(e)).roomId}))),m.handle(s.JOIN_ROOM,(o,n,t)=>v(this,void 0,void 0,(function*(){console.log("JOINING ROOM"),console.log(n,t),void 0!==R.connection&&R.connection.socket.disconnect();const o=yield d.API.RoomRequest.downloadRoom(n);yield u.FS.createShadow(t,o);const i=yield d.API.RoomRequest.createSocket();return i.on("disconnect",()=>{e.webContents.send(s.DISCONNECTED)}),i.emit(p.Events.room_join,n),yield new Promise((o,r)=>{i.once(p.Events.room_join_res,c=>v(this,void 0,void 0,(function*(){c.ok||r(),u.FS.listenForLocalFileChanges(t,e=>{i.emit(p.Events.room_file_change,{change:e,roomId:n})}),u.FS.listenForLocalPatches(t,e=>{i.emit(p.Events.room_file_change,{change:e,roomId:n})}),i.on(p.Events.room_file_change_res,o=>v(this,void 0,void 0,(function*(){if(o.change.event===f.FileEvent.FILE_MODIFIED){console.log("File patched: "+o.change.path);const e=o.change;yield u.FS.applyPatches(t,e)}else{const n=o.change;yield u.FS.applyFileChange(t,n);const i=R.getTreeData(t);e.webContents.send(s.UPDATE_FOLDER,i),console.log("File changed: "+o.change.path)}}))),R.connection={socket:i,room:{roomId:n,source:t}},o(R.connection.room)})))})}))),m.handle(s.FETCH_LOG,(e,o)=>v(this,void 0,void 0,(function*(){return(yield d.API.LogsRequest.getAllLogs(o)).logs.map(e=>{var o,n;return{event:e.event,user:(null===(o=e.byWhom)||void 0===o?void 0:o.username)||"Unknown",date:new Date(e.date).toLocaleString(),path:(null===(n=e.body)||void 0===n?void 0:n.path)||""}})}))),m.handle(s.FETCH_FOLDER,(e,o)=>v(this,void 0,void 0,(function*(){return R.getTreeData(o)}))),m.handle(s.FETCH_USERS,(e,o)=>v(this,void 0,void 0,(function*(){return(yield d.API.RoomRequest.listUsersInRoom(o)).users}))),m.handle(s.CREATE_WINDOW,(e,o)=>v(this,void 0,void 0,(function*(){let e=new _({width:o.width,height:o.height,webPreferences:{nodeIntegration:!0}});return e.on("close",()=>{e=null}),e.loadURL(`${process.env.URL}${o.path}`),e.show(),!0})))}}R.getUsers=e=>v(void 0,void 0,void 0,(function*(){const o=yield d.API.RoomRequest.listUsersInRoom(e);return!!o.ok&&o.users})),R.getTreeData=e=>(new h.FileTree).make(e);const{app:g,BrowserWindow:O}=n(3);class w{static onWindowAllClosed(){"darwin"!==process.platform&&w.app.quit()}static onClose(){w.mainWindow=null}static onReady(){w.mainWindow=new O({width:900,height:680,webPreferences:{nodeIntegration:!0}}),console.log(">>>","production"),process.env.URL="file://"+r.a.resolve("resources/app.asar/build/index.html");process.env.SERVER_ENDPOINT="http://it-pr-itpro-duw4azjoa0r0-1588304925.eu-west-1.elb.amazonaws.com",console.log(process.env.URL),w.mainWindow.loadURL(process.env.URL),w.mainWindow.on("closed",w.onClose),R.init(w.mainWindow)}static init(){w.app=g,w.app.on("window-all-closed",w.onWindowAllClosed),w.app.on("ready",w.onReady)}}w.init()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,